{"includedArchiveIdentifiers":["PopNetworking"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingsession\/init(urlsession:requestadapter:requestretrier:)-33c67","title":"init(urlSession: any URLSessionProtocol, requestAdapter: (any NetworkingRouteAdapter)?, requestRetrier: (any NetworkingRouteRetrier)?)","type":"init"},{"path":"\/documentation\/popnetworking\/networkingsession\/init(urlsession:requestadapter:requestretrier:)-7nc48","title":"init(urlSession: URLSession, requestAdapter: (any NetworkingRouteAdapter)?, requestRetrier: (any NetworkingRouteRetrier)?)","type":"init"},{"path":"\/documentation\/popnetworking\/networkingsession\/init(urlsession:requestinterceptor:)","title":"init(urlSession: URLSession, requestInterceptor: (any NetworkingRouteInterceptor)?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingsession\/execute(route:)","title":"func execute<Route>(route: Route) async throws -> Route.ResponseSerializer.SerializedObject","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingsession\/shared","title":"static let shared: NetworkingSession","type":"property"}],"path":"\/documentation\/popnetworking\/networkingsession","title":"NetworkingSession","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializer\/serializedobject","title":"SerializedObject","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializer\/serialize(responseresult:)","title":"func serialize(responseResult: Result<(Data, URLResponse), any Error>) async -> Result<Self.SerializedObject, any Error>","type":"method"}],"path":"\/documentation\/popnetworking\/networkingresponseserializer","title":"NetworkingResponseSerializer","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponsevalidator\/validate(responseresult:)","title":"func validate(responseResult: Result<(Data, URLResponse), any Error>) async throws","type":"method"}],"path":"\/documentation\/popnetworking\/networkingresponsevalidator","title":"NetworkingResponseValidator","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroute\/responseserializer-swift.associatedtype","title":"ResponseSerializer","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroute\/baseurl","title":"var baseUrl: String","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroute\/failablepublisher","title":"var failablePublisher: NetworkingRouteFailablePublisher<Self>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/headers-6z03x","title":"var headers: Self.NetworkingRouteHttpHeaders?","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/headers","title":"var headers: Self.NetworkingRouteHttpHeaders?","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroute\/method","title":"var method: NetworkingRouteHttpMethod","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/mockserializedresult-96yhb","title":"var mockSerializedResult: Result<Self.ResponseSerializer.SerializedObject, any Error>?","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/mockserializedresult","title":"var mockSerializedResult: Result<Self.ResponseSerializer.SerializedObject, any Error>?","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/parameterencoding-5o5po","title":"var parameterEncoding: NetworkingRequestParameterEncoding?","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/parameterencoding","title":"var parameterEncoding: NetworkingRequestParameterEncoding?","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroute\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroute\/publisher","title":"var publisher: NetworkingRoutePublisher<Self>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/repeater-4m8ok","title":"var repeater: Self.Repeater?","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/repeater-7albe","title":"var repeater: Self.Repeater?","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroute\/responseserializer-swift.property","title":"var responseSerializer: Self.ResponseSerializer","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/responsevalidator-2fydu","title":"var responseValidator: (any NetworkingResponseValidator)?","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/responsevalidator","title":"var responseValidator: (any NetworkingResponseValidator)?","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroute\/result","title":"var result: Result<Self.ResponseSerializer.SerializedObject, any Error>","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroute\/run","title":"var run: Self.ResponseSerializer.SerializedObject","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/session-1mtvc","title":"var session: NetworkingSession","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/session","title":"var session: NetworkingSession","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/timeoutinterval-9db54","title":"var timeoutInterval: TimeInterval?","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/timeoutinterval","title":"var timeoutInterval: TimeInterval?","type":"property"},{"children":[{"children":[{"path":"\/documentation\/popnetworking\/networkingroute\/urlrequest-793sf","title":"var urlRequest: URLRequest","type":"property"}],"title":"NetworkingRoute Implementations","type":"groupMarker"}],"path":"\/documentation\/popnetworking\/networkingroute\/urlrequest","title":"var urlRequest: URLRequest","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroute\/request(priority:completeon:completion:)","title":"func request(priority: TaskPriority?, completeOn: DispatchQueue, completion: ((Result<Self.ResponseSerializer.SerializedObject, any Error>) -> Void)?) -> Task<Self.ResponseSerializer.SerializedObject, any Error>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroute\/task(priority:)","title":"func task(priority: TaskPriority?) -> Task<Self.ResponseSerializer.SerializedObject, any Error>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroute\/networkingroutehttpheaders","title":"NetworkingRoute.NetworkingRouteHttpHeaders","type":"typealias"},{"path":"\/documentation\/popnetworking\/networkingroute\/repeater-swift.typealias","title":"NetworkingRoute.Repeater","type":"typealias"}],"path":"\/documentation\/popnetworking\/networkingroute","title":"NetworkingRoute","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingrouteadapter\/adapt(urlrequest:)","title":"func adapt(urlRequest: URLRequest) async throws -> URLRequest","type":"method"}],"path":"\/documentation\/popnetworking\/networkingrouteadapter","title":"NetworkingRouteAdapter","type":"protocol"},{"path":"\/documentation\/popnetworking\/networkingrouteinterceptor","title":"NetworkingRouteInterceptor","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingrouteretrier\/retry(urlrequest:dueto:urlresponse:retrycount:)","title":"func retry(urlRequest: URLRequest?, dueTo: any Error, urlResponse: URLResponse?, retryCount: Int) async -> NetworkingRouteRetrierResult","type":"method"}],"path":"\/documentation\/popnetworking\/networkingrouteretrier","title":"NetworkingRouteRetrier","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlsessionprotocol\/data(for:)","title":"func data(for: URLRequest) async throws -> (Data, URLResponse)","type":"method"}],"path":"\/documentation\/popnetworking\/urlsessionprotocol","title":"URLSessionProtocol","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/jsonencoding\/init(options:)","title":"init(options: JSONSerialization.WritingOptions)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/jsonencoding\/options","title":"let options: JSONSerialization.WritingOptions","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/jsonencoding\/encode(_:with:)-2pvsx","title":"func encode(inout URLRequest, with: Data?)","type":"method"},{"path":"\/documentation\/popnetworking\/jsonencoding\/encode(_:with:)-6qhce","title":"func encode(inout URLRequest, with: [String : Any]?) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/jsonencoding\/default","title":"static var `default`: JSONEncoding","type":"property"},{"path":"\/documentation\/popnetworking\/jsonencoding\/prettyprinted","title":"static var prettyPrinted: JSONEncoding","type":"property"}],"path":"\/documentation\/popnetworking\/jsonencoding","title":"JSONEncoding","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/init(route:)","title":"init(route: Route)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/failure","title":"NetworkingRouteFailablePublisher.Failure","type":"typealias"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/output","title":"NetworkingRouteFailablePublisher.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/values","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/append(_:)-3kwi4","title":"func append<P>(P) -> Publishers.Concatenate<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/append(_:)-5um77","title":"func append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/append(_:)-6x2tx","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((any Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/combinelatest(_:_:)-5borr","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/combinelatest(_:_:)-9o2t6","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/combinelatest(_:_:_:)-5wovv","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/combinelatest(_:_:_:)-8k3qk","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/flatmap(maxpublishers:_:)-12f0h","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/flatmap(maxpublishers:_:)-qq0d","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((any Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/map(_:)-7ry4m","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/map(_:)-80p5e","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:)-3xyqs","title":"func merge<P>(with: P) -> Publishers.Merge<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:)-7rkc6","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/prepend(_:)-4i8jc","title":"func prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/prepend(_:)-6hw3r","title":"func prepend<P>(P) -> Publishers.Concatenate<P, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/prepend(_:)-78tky","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/print(_:to:)","title":"func print(String, to: (any TextOutputStream)?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: (Subscribers.Completion<Self.Failure>) -> Void, receiveValue: (Self.Output) -> Void) -> AnyCancellable","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/subscribe(_:)-2t2jg","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/subscribe(_:)-2yny3","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/zip(_:_:)-4sbyq","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/zip(_:_:)-788yu","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/zip(_:_:_:)-6iiv4","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/zip(_:_:_:)-81n70","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/networkingroutefailablepublisher","title":"NetworkingRouteFailablePublisher","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/failure","title":"NetworkingRoutePublisher.Failure","type":"typealias"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/output","title":"NetworkingRoutePublisher.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/values-22tzd","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/values-6l6j4","title":"var values: AsyncPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/append(_:)-7s210","title":"func append<S>(S) -> Publishers.Concatenate<Self, Publishers.Sequence<S, Self.Failure>>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/append(_:)-8nycl","title":"func append<P>(P) -> Publishers.Concatenate<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/append(_:)-8rump","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((any Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/combinelatest(_:_:)-2wked","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/combinelatest(_:_:)-7skif","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/combinelatest(_:_:_:)-3m85v","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/combinelatest(_:_:_:)-trhk","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/flatmap(maxpublishers:_:)-1byv4","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/flatmap(maxpublishers:_:)-1uq5t","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/flatmap(maxpublishers:_:)-3e5m4","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/flatmap(maxpublishers:_:)-6ukja","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((any Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/map(_:)-289mb","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/map(_:)-9d4cd","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:)-6r473","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:)-9arxj","title":"func merge<P>(with: P) -> Publishers.Merge<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/prepend(_:)-13crc","title":"func prepend<P>(P) -> Publishers.Concatenate<P, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/prepend(_:)-8jax6","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/prepend(_:)-91mny","title":"func prepend<S>(S) -> Publishers.Concatenate<Publishers.Sequence<S, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/print(_:to:)","title":"func print(String, to: (any TextOutputStream)?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: (Subscribers.Completion<Self.Failure>) -> Void, receiveValue: (Self.Output) -> Void) -> AnyCancellable","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/sink(receivevalue:)","title":"func sink(receiveValue: (Self.Output) -> Void) -> AnyCancellable","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/subscribe(_:)-4ii3p","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/subscribe(_:)-55vdl","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/zip(_:_:)-6f7xp","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/zip(_:_:)-8susz","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/zip(_:_:_:)-4cfiz","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/zip(_:_:_:)-68uqd","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/popnetworking\/networkingroutepublisher\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/popnetworking\/networkingroutepublisher\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/networkingroutepublisher","title":"NetworkingRoutePublisher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/route\/init(baseurl:path:method:headers:parameterencoding:session:responsevalidator:responseserializer:mockserializedresult:timeoutinterval:repeater:)","title":"init(baseUrl: String, path: String, method: NetworkingRouteHttpMethod, headers: Route<ResponseSerializer>.NetworkingRouteHttpHeaders?, parameterEncoding: NetworkingRequestParameterEncoding?, session: NetworkingSession, responseValidator: (any NetworkingResponseValidator)?, responseSerializer: ResponseSerializer, mockSerializedResult: Result<ResponseSerializer.SerializedObject, any Error>?, timeoutInterval: TimeInterval?, repeater: Route<ResponseSerializer>.Repeater?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/route\/baseurl","title":"var baseUrl: String","type":"property"},{"path":"\/documentation\/popnetworking\/route\/headers","title":"var headers: Route<ResponseSerializer>.NetworkingRouteHttpHeaders?","type":"property"},{"path":"\/documentation\/popnetworking\/route\/method","title":"var method: NetworkingRouteHttpMethod","type":"property"},{"path":"\/documentation\/popnetworking\/route\/mockserializedresult","title":"var mockSerializedResult: Result<ResponseSerializer.SerializedObject, any Error>?","type":"property"},{"path":"\/documentation\/popnetworking\/route\/parameterencoding","title":"var parameterEncoding: NetworkingRequestParameterEncoding?","type":"property"},{"path":"\/documentation\/popnetworking\/route\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/popnetworking\/route\/repeater","title":"var repeater: Route<ResponseSerializer>.Repeater?","type":"property"},{"path":"\/documentation\/popnetworking\/route\/responseserializer","title":"var responseSerializer: ResponseSerializer","type":"property"},{"path":"\/documentation\/popnetworking\/route\/responsevalidator","title":"var responseValidator: (any NetworkingResponseValidator)?","type":"property"},{"path":"\/documentation\/popnetworking\/route\/session","title":"var session: NetworkingSession","type":"property"},{"path":"\/documentation\/popnetworking\/route\/timeoutinterval","title":"var timeoutInterval: TimeInterval?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/route\/failablepublisher","title":"var failablePublisher: NetworkingRouteFailablePublisher<Self>","type":"property"},{"path":"\/documentation\/popnetworking\/route\/publisher","title":"var publisher: NetworkingRoutePublisher<Self>","type":"property"},{"path":"\/documentation\/popnetworking\/route\/result","title":"var result: Result<Self.ResponseSerializer.SerializedObject, any Error>","type":"property"},{"path":"\/documentation\/popnetworking\/route\/run","title":"var run: Self.ResponseSerializer.SerializedObject","type":"property"},{"path":"\/documentation\/popnetworking\/route\/urlrequest","title":"var urlRequest: URLRequest","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/route\/request(priority:completeon:completion:)","title":"func request(priority: TaskPriority?, completeOn: DispatchQueue, completion: ((Result<Self.ResponseSerializer.SerializedObject, any Error>) -> Void)?) -> Task<Self.ResponseSerializer.SerializedObject, any Error>","type":"method"},{"path":"\/documentation\/popnetworking\/route\/task(priority:)","title":"func task(priority: TaskPriority?) -> Task<Self.ResponseSerializer.SerializedObject, any Error>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/route\/repeater-swift.typealias","title":"Route.Repeater","type":"typealias"}],"path":"\/documentation\/popnetworking\/route\/networkingroute-implementations","title":"NetworkingRoute Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/route","title":"Route","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/routeinterceptor\/init(adapters:retriers:)","title":"init(adapters: [any NetworkingRouteAdapter], retriers: [any NetworkingRouteRetrier])","type":"init"},{"path":"\/documentation\/popnetworking\/routeinterceptor\/init(requestinterceptors:)","title":"init(requestInterceptors: [any NetworkingRouteInterceptor])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/routeinterceptor\/adapt(urlrequest:)","title":"func adapt(urlRequest: URLRequest) async throws -> URLRequest","type":"method"},{"path":"\/documentation\/popnetworking\/routeinterceptor\/retry(urlrequest:dueto:urlresponse:retrycount:)","title":"func retry(urlRequest: URLRequest?, dueTo: any Error, urlResponse: URLResponse?, retryCount: Int) async -> NetworkingRouteRetrierResult","type":"method"}],"path":"\/documentation\/popnetworking\/routeinterceptor","title":"RouteInterceptor","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/init(destination:arrayencoding:boolencoding:)","title":"init(destination: URLEncoding.Destination, arrayEncoding: URLEncoding.ArrayEncoding, boolEncoding: URLEncoding.BoolEncoding)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/arrayencoding-swift.property","title":"let arrayEncoding: URLEncoding.ArrayEncoding","type":"property"},{"path":"\/documentation\/popnetworking\/urlencoding\/boolencoding-swift.property","title":"let boolEncoding: URLEncoding.BoolEncoding","type":"property"},{"path":"\/documentation\/popnetworking\/urlencoding\/destination-swift.property","title":"let destination: URLEncoding.Destination","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/encode(_:with:)","title":"func encode(inout URLRequest, with: [String : Any]?) throws","type":"method"},{"path":"\/documentation\/popnetworking\/urlencoding\/escape(_:)","title":"func escape(String) -> String","type":"method"},{"path":"\/documentation\/popnetworking\/urlencoding\/querycomponents(fromkey:value:)","title":"func queryComponents(fromKey: String, value: Any) -> [(String, String)]","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/default","title":"static var `default`: URLEncoding","type":"property"},{"path":"\/documentation\/popnetworking\/urlencoding\/httpbody","title":"static var httpBody: URLEncoding","type":"property"},{"path":"\/documentation\/popnetworking\/urlencoding\/querystring","title":"static var queryString: URLEncoding","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/arrayencoding-swift.enum\/brackets","title":"case brackets","type":"case"},{"path":"\/documentation\/popnetworking\/urlencoding\/arrayencoding-swift.enum\/nobrackets","title":"case noBrackets","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/arrayencoding-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/popnetworking\/urlencoding\/arrayencoding-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/urlencoding\/arrayencoding-swift.enum","title":"URLEncoding.ArrayEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/boolencoding-swift.enum\/literal","title":"case literal","type":"case"},{"path":"\/documentation\/popnetworking\/urlencoding\/boolencoding-swift.enum\/numeric","title":"case numeric","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/boolencoding-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/popnetworking\/urlencoding\/boolencoding-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/urlencoding\/boolencoding-swift.enum","title":"URLEncoding.BoolEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/destination-swift.enum\/httpbody","title":"case httpBody","type":"case"},{"path":"\/documentation\/popnetworking\/urlencoding\/destination-swift.enum\/methoddependent","title":"case methodDependent","type":"case"},{"path":"\/documentation\/popnetworking\/urlencoding\/destination-swift.enum\/querystring","title":"case queryString","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/urlencoding\/destination-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/popnetworking\/urlencoding\/destination-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/urlencoding\/destination-swift.enum","title":"URLEncoding.Destination","type":"enum"}],"path":"\/documentation\/popnetworking\/urlencoding","title":"URLEncoding","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingrequestparameterencoding\/json(params:encoder:urlparams:urlencoder:)","title":"case json(params: [String : any Sendable]?, encoder: JSONEncoding, urlParams: [String : any Sendable]?, urlEncoder: URLEncoding)","type":"case"},{"path":"\/documentation\/popnetworking\/networkingrequestparameterencoding\/jsondata(data:encoder:urlparams:urlencoder:)","title":"case jsonData(data: Data?, encoder: JSONEncoding, urlParams: [String : any Sendable]?, urlEncoder: URLEncoding)","type":"case"},{"path":"\/documentation\/popnetworking\/networkingrequestparameterencoding\/url(params:encoder:)","title":"case url(params: [String : any Sendable]?, encoder: URLEncoding)","type":"case"}],"path":"\/documentation\/popnetworking\/networkingrequestparameterencoding","title":"NetworkingRequestParameterEncoding","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/dataresponseserializer\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/dataresponseserializer\/serialize(responseresult:)","title":"func serialize(responseResult: Result<(Data, URLResponse), any Error>) async -> Result<Data, any Error>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/dataresponseserializer\/serializedobject","title":"NetworkingResponseSerializers.DataResponseSerializer.SerializedObject","type":"typealias"}],"path":"\/documentation\/popnetworking\/networkingresponseserializers\/dataresponseserializer","title":"NetworkingResponseSerializers.DataResponseSerializer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponseserializer\/init(jsondecoder:)","title":"init(jsonDecoder: JSONDecoder)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponseserializer\/serialize(responseresult:)","title":"func serialize(responseResult: Result<(Data, URLResponse), any Error>) async -> Result<SuccessType, any Error>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponseserializer\/serializedobject","title":"NetworkingResponseSerializers.DecodableResponseSerializer.SerializedObject","type":"typealias"}],"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponseserializer","title":"NetworkingResponseSerializers.DecodableResponseSerializer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponsewitherrorserializer\/init(jsondecoder:)","title":"init(jsonDecoder: JSONDecoder)","type":"init"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponsewitherrorserializer\/init(successtypejsondecoder:failuretypejsondecoder:)","title":"init(successTypeJsonDecoder: JSONDecoder, failureTypeJsonDecoder: JSONDecoder)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponsewitherrorserializer\/serialize(responseresult:)","title":"func serialize(responseResult: Result<(Data, URLResponse), any Error>) async -> Result<SuccessType, any Error>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponsewitherrorserializer\/serializederrorobject","title":"NetworkingResponseSerializers.DecodableResponseWithErrorSerializer.SerializedErrorObject","type":"typealias"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponsewitherrorserializer\/serializedobject","title":"NetworkingResponseSerializers.DecodableResponseWithErrorSerializer.SerializedObject","type":"typealias"}],"path":"\/documentation\/popnetworking\/networkingresponseserializers\/decodableresponsewitherrorserializer","title":"NetworkingResponseSerializers.DecodableResponseWithErrorSerializer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/httpstatuscoderesponseserializer\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/httpstatuscoderesponseserializer\/serialize(responseresult:)","title":"func serialize(responseResult: Result<(Data, URLResponse), any Error>) async -> Result<Int, any Error>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingresponseserializers\/httpstatuscoderesponseserializer\/serializedobject","title":"NetworkingResponseSerializers.HttpStatusCodeResponseSerializer.SerializedObject","type":"typealias"}],"path":"\/documentation\/popnetworking\/networkingresponseserializers\/httpstatuscoderesponseserializer","title":"NetworkingResponseSerializers.HttpStatusCodeResponseSerializer","type":"struct"}],"path":"\/documentation\/popnetworking\/networkingresponseserializers","title":"NetworkingResponseSerializers","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/delete","title":"case delete","type":"case"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/get","title":"case get","type":"case"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/patch","title":"case patch","type":"case"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/post","title":"case post","type":"case"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/put","title":"case put","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/popnetworking\/networkingroutehttpmethod\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/networkingroutehttpmethod","title":"NetworkingRouteHttpMethod","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/networkingrouteretrierresult\/donotretry","title":"case doNotRetry","type":"case"},{"path":"\/documentation\/popnetworking\/networkingrouteretrierresult\/retry","title":"case retry","type":"case"},{"path":"\/documentation\/popnetworking\/networkingrouteretrierresult\/retrywithdelay(_:)","title":"case retryWithDelay(TimeInterval)","type":"case"}],"path":"\/documentation\/popnetworking\/networkingrouteretrierresult","title":"NetworkingRouteRetrierResult","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/popnetworking\/swift\/array\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/popnetworking\/swift\/array\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/popnetworking\/swift\/array","title":"Array","type":"extension"}],"path":"\/documentation\/popnetworking\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/popnetworking","title":"PopNetworking","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}